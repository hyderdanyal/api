# -*- coding: utf-8 -*-
"""Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd
import numpy as np
from scipy.sparse import csr_matrix
import sklearn
from sklearn.decomposition import TruncatedSVD

books=pd.read_csv("newbooks.csv",usecols=['book_id','original_title','authors'])
ratings=pd.read_csv("ratings.csv", usecols=['user_id','book_id','rating'])

combine_book_rating = pd.merge(ratings,books, on="book_id")

combine_book_rating.head()

combine_book_rating = combine_book_rating.dropna(axis=0,subset = ['original_title'])

book_ratingCount = (combine_book_rating.
                    groupby(by = ['original_title'])['rating'].count().
                    reset_index().rename(columns = {'rating' : 'totalRatingCount'})
                    [['original_title','totalRatingCount']])
book_ratingCount.head()

book_ratingCount.head(1)

pd.set_option('display.float_format', lambda x : '%.3f' % x)
print(book_ratingCount['totalRatingCount'].describe())

rating_with_totalRatingCount = combine_book_rating.merge(book_ratingCount,
                                                          left_on='original_title', right_on='original_title')
rating_with_totalRatingCount.head()

rating_with_totalRatingCount_pivot = rating_with_totalRatingCount.pivot_table(
    index='original_title', columns='user_id', values= 'rating').fillna(0)

rating_with_totalRatingCount_matrix = csr_matrix(rating_with_totalRatingCount_pivot.values)

from sklearn.neighbors import NearestNeighbors

model_knn = NearestNeighbors(metric='cosine',algorithm='brute')
model_knn.fit(rating_with_totalRatingCount_matrix)

query_index=np.random.choice(rating_with_totalRatingCount_pivot.shape[0])
distances,indices=model_knn.kneighbors(rating_with_totalRatingCount_pivot.iloc[query_index, :].values.reshape(1,-1),n_neighbors=6)

for i in range (0,len(distances.flatten())):
  if i==0:
    print('Recommendation for {0}:\n'.format(rating_with_totalRatingCount_pivot.index[query_index]))
  else:
    print('{0}: {1}, with distance of {2}: '.format(i,rating_with_totalRatingCount_pivot.index[indices.flatten()[i]],distances.flatten()[i]))

